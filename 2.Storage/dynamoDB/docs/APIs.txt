DynamoDB - API
    Writing Data:
        -PutItem - Write data to Dynemo (create data or full replace)
            -Consumes WCU
        -UpdateItem - Update data in DynamoDB (partial update of attributes)
            -Possibility to use Atomic Countuers and increase them
        -Conditional Writes:
            -Accept a write / update only if conditions are respected, otherwise reject
            -helps with concurrent access to items
            -No performance impact
    
    Deleting Data:
        -DeleteItem:
            -Delete an individual row
            -Ability to perform a conditional delete
        
        -DeleteTable:
            -Delete a whole table and all its items
            -Much quicker deletion than calling DeleteItem on all items

    Batching Writes:
        -BatchWriteItem:
            -Up to 25 PutItem and / or DeleteItem in one call
            -Up to 16 MB of data written
            -Up to 400 KB of data per item

        -Allows you to save in latency by reducing the number of API calls done against DynamoDB
        -Operations are done in parallel for better efficiency
        -If the batch fails is possible to try just failed items

    Reading Data:
        -GetItem:
            -Read based on Primary Key  -> HASH or HASH-RANGE
            -Eventually consistent read by default
            -Option to use strongly consistent reads
            -ProjectionExpression can be specified to include certain attributes

        -BatchGetItem:
            -Up to 100 items
            -Up to 16MB of data
            -Items are retrieved in parallel to minimize latency
    
    Query:
        -Returns items based on:
            -Partition key Value
            -SortKey value
        -Returns:
            -Up to 1MB of data
            -Number of items specified in Limit

    Scan:
        -Scan the entire table then filter out data (inefficient)
        -Returns up to 1 MB of data - use pagination to keep on reading
        -Consumes a lot of RCU
        -Limit impact using Limit or reduce the size of the result and pause
        -For faster performance, use parallel scans:
            -Multiple instances scan multiple partitions at the same time
        -Can use a ProjectionExpression + FilterExpression (no change to RCU)